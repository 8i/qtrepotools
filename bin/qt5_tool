#!/usr/bin/perl -w
####################################################################################################
#
# Helper script for Qt 5
#
# Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
# Contact: Nokia Corporation (qt-info@nokia.com)
#
####################################################################################################

############################################################################################
#
# Convenience script working with a Qt 5 repository.
#
# Feel free to add useful options!
#
# The intention is that this works with the old Perl used for Symbian as well:
# - Variables should not shadow others.
# - Some functions are just broken  (abs_path()),etc.
############################################################################################

use strict;

use Getopt::Long;
use File::Basename;
use Cwd;
use File::Spec;
use POSIX;
use IO::File;
use File::Path;

my $CLEAN=0;
my $DOC=0;
my $PULL=0;
my $BUILD=0;
my $RESET=0;
my $DIFF=0;
my $BOOTSTRAP=0;
my $optStagingModule;
my $optTeam = '';
my $optCommitHook;
my $configFile = '.qt5_tool';

my $USAGE=<<EOF;
Usage: qt5_tool [OPTIONS]

Utility script for working with Qt 5 modules.

Feel free to extend!

Options:
  -d  Diff (over all modules, relative to root)
  -r  Reset hard
  -c  Clean
  -p  Pull
  -b  Build
  -o  [D]ocumentation
  -q  Quick bootstrap a new checkout under current folder (excluding webkit).

  -s <module> Switch a module to a staging repository.
  -t <team>   Team for use with -s (default: '')
  -h <hook>   Path to commit hook for -s.

Example use cases:
  qt5_tool -c -p -b     Clean, pull and build for nightly builds
  qt5_tool -d           Generate modules diff relative to root directory
  qt5_tool -r           Reset --hard of repo.

qt_tool can be configured by creating a configuration file \$HOME/$configFile in
the format key=value. It is possible to use repository-specific values by adding
a key postfixed by a dash and the repository folder base name.
Supported keys:

initArguments:      Arguments to init-repository for -q (should contain
                    webkit mirror).
configureArguments: Arguments to configure
shadowBuildPostfix: Postfix to use for shadow build directory.

Example:

shadowBuildPostfix=-build
shadowBuildPostfix-qt-5special=-special-build

specifies that for a checkout in '/home/user/qt-5', shadow builds are to be
done in '/home/user/qt-5-build'. It is overridden by a value for the checkout
'/home/user/qt-5special', which would result in '/home/user/qt-5-special-build'
EOF

my %preferredBranches = ( 'qtwebkit' , 'qt-modularization-base' );

# --------------- Detect OS

my ($OS_LINUX, $OS_WINDOWS, $OS_MAC)  = (0, 1, 2);
my $os = $OS_LINUX;
if (index($^O, 'MSWin') >= 0) {
    $os = $OS_WINDOWS;
} elsif (index($^O, 'darwin') >= 0) {
   $os = $OS_MAC;
}

my $make = $os == $OS_WINDOWS ? 'nmake' : 'make';
my @makeArgs = $os == $OS_WINDOWS ? () : ('-s');
my $git = 'git'; # TODO: Mac, Windows special cases?

my $rootDir = '';
my $baseDir = '';
my $home = $os == $OS_WINDOWS ? ($ENV{'HOMEDRIVE'} . $ENV{'HOMEPATH'}) : $ENV{'HOME'};

# --- Fix a diff line from a submodule such that it can be applied to
#     the root Qt 5 directory, that is:
#     '--- a/foo...' -> '--- a/<module>/foo...'

sub fixDiff
{
   my ($line, $module) = @_;
   if (index($line, '--- a/') == 0 || index($line, '+++ b/') == 0) {
       return substr($line, 0, 6) . $module . '/' . substr($line, 6);
   }
   if (index($line, 'diff --git ') == 0) {
       $line =~ s| a/| a/$module/|;
       $line =~ s| b/| b/$module/|;
   }
   return $line;
}

# ---- Generate a diff from all submodules such that it can be applied to
#      the root Qt 5 directory.

sub diff
{
    my $totalDiff = '';
    my ($rootDir,$modArrayRef) = @_;
    foreach my $MOD (@$modArrayRef) {
     chdir($MOD) or die ('Failed to chdir from' . $rootDir . ' to "' . $MOD . '":' . $!);
     my $diffOutput = `$git diff`;
     foreach my $line (split(/\n/, $diffOutput)) {
         chomp($line);
         $totalDiff .= fixDiff($line, $MOD);
         $totalDiff .= "\n";
     }
     chdir($rootDir);
  }
  return $totalDiff;
}

# ---- Read a value from a configuration file of the form key=value.

sub readConfigFile
{
    my ($fileName, $key) = @_;

    my $configLine = '';
    my $configFile = new IO::File('<' . $fileName) or return $configLine;
    while (my $line = <$configFile>) {
        chomp($line);
        if ($line =~ /^\s*$key\s*=\s*(.*)$/) {
           $configLine .= $1;
           last;
        }
    }
    $configFile->close();
    return $configLine;
}

# ---- Read a value from a git config line.

sub readGitConfig
{
    my ($module, $key) = @_;
    return readConfigFile(File::Spec->catfile($rootDir, $module, '.git', 'config'), $key);
}

# ---- Read a value from the '$HOME/.qt5_tool' configuration file
#      When given a key 'key' for the repository directory '/foo/qt-5',
#      check for the repo-specific value 'key-qt5' and then for the general
#      'key'.

sub readQt5ToolConfig
{
    my ($key) = @_;
    my $repoKey = $key . '-' . $baseDir;
    my $repoValue = readConfigFile(File::Spec->catfile($home, $configFile), $repoKey);
    return $repoValue if $repoValue ne '';
    return readConfigFile(File::Spec->catfile($home, $configFile), $key);
}

# ---- Check for absolute path names.

sub isAbsolute
{
    my ($file) = @_;
    return index($file, ':') == 1 if ($os == $OS_WINDOWS);
    return index($file, '/') == 0;
}

# --------------- MAIN: Parse arguments

if (!GetOptions("clean" => \$CLEAN, "ocumentation" => \$DOC,
     "pull" => \$PULL, "reset" => \$RESET, "diff" => \$DIFF,
     "build" => \$BUILD, "staging=s" => \$optStagingModule, "team=s" => \$optTeam,
     "hook=s" => \$optCommitHook, "quick-bootstrap"  => \$BOOTSTRAP)
    || ($CLEAN + $DOC + $PULL + $BUILD + $RESET + $DIFF + $BOOTSTRAP == 0 && ! defined $optStagingModule)) {
    print $USAGE;
    exit (1);
}

# --------------- Bootstrap

if ( $BOOTSTRAP != 0 ) {
    my $repoURL = 'git@scm.dev.nokia.troll.no:qt/qt5.git';
    my $targetFolder = 'qt-5';
    my @initOptions = ('-nokia-developer');
    my $initArgumentsFromConfig = readQt5ToolConfig('initArguments');
#   -- Webkit is usually too slow to clone unless something is configured.
    if ($initArgumentsFromConfig ne '') {
        push(@initOptions, split(/ /, $initArgumentsFromConfig));
    } else {
        push(@initOptions, '--no-webkit');
    }
    my $toolsFolder = 'qtrepotools';
    # -- Clone
    my $cloneRc = system($git, ('clone', $repoURL, $targetFolder));
    die 'clone '. $$repoURL  . ' failed.' if $cloneRc;
    chdir($targetFolder) or die ('Failed to chdir to "' . $targetFolder . '":' . $!);
    # -- Run init
    my $initRc = 0;
    if ($os == $OS_WINDOWS) {
        $initRc = system('perl', 'init-repository', @initOptions);
    } else {
        $initRc = system('./init-repository', @initOptions);
    }
    die 'init '. $$repoURL  . ' failed.' if $initRc;
    # -- Checkout 'master' in repotools and run the qt5_tool there
    # to pull such that the branches are initialized.
    chdir($toolsFolder) or die ('Failed to chdir to tools folder:' . $!);
    my $checkoutMasterRc = system($git, ('checkout', 'master'));
    die 'checkout master in tools repository failed.' if $checkoutMasterRc;
    chdir('..');
    system(File::Spec->catfile($toolsFolder, 'bin', 'qt5_tool'), '-p');
    exit 0;
}

# --- Change to root: Assume we live in qtrepotools below root.
#     Note: Cwd::realpath is broken in the Symbian-perl-version.
my $prog = $0;
$prog = Cwd::realpath($0) unless isAbsolute($prog);
$rootDir = dirname(dirname(dirname($prog)));
$baseDir = basename($rootDir);
chdir($rootDir) or die ('Failed to chdir to' . $rootDir . '":' . $!);

# ---- Determine modules by trying to find <module>/.git/config.

my @MODULES = ();
opendir (DIR, $rootDir) or die ('Cannot read ' . $rootDir . $!);
while (my $e = readdir(DIR)) {
   if ($e ne '.' && $e ne '..') {
       push(@MODULES, $e) if (-d $e && -f (File::Spec->catfile($e, '.git','config')));
   }
}
closedir(DIR);
die ('Failed to detect modules in ' . $rootDir . ".\nNeeds to be called from the root directory.") if @MODULES == 0;

print diff($rootDir, \@MODULES) if $DIFF;

# --------------- Reset: Save to a patch in HOME dir indicating date in
#                 file name should there be a diff.
if ( $RESET !=  0 ) {
  print 'Resetting Qt 5 in ',$rootDir,"\n";
  my $changes = diff($rootDir, \@MODULES);
  if ($changes ne '') {
     my $patch = File::Spec->catfile($home, POSIX::strftime('qt5_d%Y%m%d%H%M.patch',localtime));
     my $patchFile = new IO::File('>' . $patch) or die ('Unable to open for writing ' .  $patch . ' :' . $!);
     print $patchFile $changes;
     $patchFile->close();
     print 'Saved ', $patch, "\n";
  }
  system($git, ('reset','--hard'));
  system($git, ('submodule','foreach',$git,'reset','--hard'));
}

# --------------- Switch to branch (Untested)

if (defined $optStagingModule) {
    chdir($optStagingModule) or die ('Failed to chdir from' . $rootDir . ' to "' . $optStagingModule . '":' . $!);
    my $strc = system($git, ('fetch', '--all'));
    die 'fetch '. $optStagingModule . ' failed.' if $strc;
    my $branchName = $optTeam ne '' ? ($optTeam . '/master') :  'staging/master';
    my $stagingRemoteBranch =  $optStagingModule;
    $stagingRemoteBranch .= '-' . $optTeam if $optTeam ne '';
    $stagingRemoteBranch .= '-staging/master';
    print 'Switching to ', $branchName, ' from ', $stagingRemoteBranch, "\n";
    $strc = system($git, ('checkout', '-b', $branchName, $stagingRemoteBranch));
    die 'checkout '. $optStagingModule .  ' failed.' if $strc;
#   -- Copy/Link the commit hook: Try to autodetect standard setup.
    if (!defined $optCommitHook && $os != $OS_WINDOWS) {
       my $hook = $ENV{"HOME"} . '/dev/devtools/shell/git_post_commit_hook';
       $optCommitHook = $hook if -f $hook;
    }
#   -- Link or copy the hook according to platform.
    if (defined $optCommitHook) {
        my $target =File::Spec->catfile('.git', 'hooks' ,'post-commit');
        if (! -e $target) {
            print 'Setting up commit hook: ', $optCommitHook, ' ', $target,"\n";
            if ($os == $OS_WINDOWS) {
               system('xcopy.exe', $optCommitHook, $target);
            } else {
                system('ln', '-s', $optCommitHook, $target);
            }
        }
    }
    chdir($rootDir);
}

# --------------- Clean if desired

if ( $CLEAN !=  0 ) {
  print 'Cleaning Qt 5 in ',$rootDir,"\n";
  system($git, ('clean','-dxf'));
  system($git, ('submodule','foreach',$git,'clean','-dxf'));
}

# ---- Pull: Switch to branch unless there is one (check preferred
#      branch hash, default to branch n+1, which is mostly master).

if ( $PULL !=  0 ) {
  print 'Pulling Qt 5 in ',$rootDir,"\n";
  my $prc = system($git, ('pull'));
  die 'Pull failed'  if ($prc);
  foreach my $MOD (@MODULES) {
     print 'Examining: ', $MOD, ' url: ',readGitConfig($MOD, 'url'), ' ';
     chdir($MOD) or die ('Failed to chdir from' . $rootDir . ' to "' . $MOD . '":' . $!);
     my @branches = split("\n", `$git branch`);
     my @currentBranches = grep(/^\* /, @branches);
     die ('Unable to determine branch of ' . $MOD) if @currentBranches != 1;
     my $currentBranch = substr($currentBranches[0], 2);
     if ($currentBranch eq '(no branch)') {
        # Switch to suitable branch when none is set initially.
        my $desiredBranch = $preferredBranches{$MOD};
        $desiredBranch = substr($branches[1],2) unless defined $desiredBranch;
        die ('Unable to determine suitable branch for ' . $MOD) if not defined $desiredBranch;
        print 'Switching ',$MOD, ' from ', $currentBranch,' to ',$desiredBranch,"\n";
        my $rc = system($git, ('checkout', $desiredBranch));
        die 'Checkout of ' . $desiredBranch . ' failed'  if ($rc);
     } else {
        print ' branch: ',$currentBranch,"\n";
     }
     print 'Pulling ', $MOD, "\n";
     $prc = system($git, ('pull'));
     die 'Pull ' . $MOD . ' failed'  if ($prc);
     chdir($rootDir);
  }
}

# ---- Configure and build

if ( $BUILD !=  0 ) {
    print 'Building Qt 5 in ',$rootDir,"\n";
    my @configureArguments = ('-nokia-developer');
    my $configureArgumentsFromConfig = readQt5ToolConfig('configureArguments');
    push(@configureArguments, split(/ /, $configureArgumentsFromConfig)) unless $configureArgumentsFromConfig eq '';
#   --- Shadow builds: Remove and re-create directory
    my $shadowBuildPostfix = readQt5ToolConfig('shadowBuildPostfix');
    if ($shadowBuildPostfix ne '') {
        my $shadowBuildDir = $rootDir . $shadowBuildPostfix;
        print 'Shadow build: "', $shadowBuildDir,"\"\n";
        if (-d $shadowBuildDir) {
            File::Path::rmtree($shadowBuildDir) or die ('Unable to remove ' . $shadowBuildDir . ' :' . $!);
        }
        mkdir($shadowBuildDir) or die  ('Unable to create ' . $shadowBuildDir . ' :' . $!);
        chdir($shadowBuildDir) or die  ('Unable to chdir ' . $shadowBuildDir . ' :' . $!);
    }
#   ---- Configure and build
    my $brc = system(File::Spec->catfile($rootDir, 'configure'), @configureArguments);
    die 'Configure failed'  if ($brc);
    $brc = system($make, @makeArgs);
    die ($make . ' failed')  if ($brc);
}

# ---- Untested: Build documentation.

if ($DOC !=  0 ) {
   print 'Documenting Qt 5 in ',$rootDir,"\n";
   my $drc = system($make, (@makeArgs,'docs'));
   die ($make . ' docs failed')  if ($drc);
}
